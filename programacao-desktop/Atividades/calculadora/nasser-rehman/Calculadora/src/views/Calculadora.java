/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.*;
import java.awt.event.KeyListener;
import javax.swing.JButton;
import static javax.swing.SwingConstants.RIGHT;

/**
 *
 * @author nadook
 */
public class Calculadora extends javax.swing.JFrame {

    
    /**
     * Creates new form Calculadora
     */
    public Calculadora() {
        initComponents();
        JButton eraseLast = new javax.swing.JButton();
        
        ButtonHandler handler = new ButtonHandler();
        
        //Handler para digitação
        this.displayLabel.setHorizontalAlignment(RIGHT);
        this.jPanel.addKeyListener(handler);
        this.jPanel.setFocusable(true);
        this.jPanel.requestFocus();
        this.jPanel.grabFocus();
        
        oneButton.setFocusable(false);
        twoButton.setFocusable(false);
        threeButton.setFocusable(false);
        fourButton.setFocusable(false);
        fiveButton.setFocusable(false);
        sixButton.setFocusable(false);
        sevenButton.setFocusable(false);
        eightButton.setFocusable(false);
        nineButton.setFocusable(false);
        zeroButton.setFocusable(false);
        acButton.setFocusable(false);
        invertButton.setFocusable(false);
        percentButton.setFocusable(false);
        divisionButton.setFocusable(false);
        multiplicationButton.setFocusable(false);
        subtractButton.setFocusable(false);
        addictionButton.setFocusable(false);
        resultButton.setFocusable(false);
        dotButton.setFocusable(false);

       
        //Handlers para clique
        oneButton.addActionListener(handler);
        twoButton.addActionListener(handler);
        threeButton.addActionListener(handler);
        fourButton.addActionListener(handler);
        fiveButton.addActionListener(handler);
        sixButton.addActionListener(handler);
        sevenButton.addActionListener(handler);
        eightButton.addActionListener(handler);
        nineButton.addActionListener(handler);
        zeroButton.addActionListener(handler);

        acButton.addActionListener(handler);
        invertButton.addActionListener(handler);
        percentButton.addActionListener(handler);
        divisionButton.addActionListener(handler);
        multiplicationButton.addActionListener(handler);
        subtractButton.addActionListener(handler);
        addictionButton.addActionListener(handler);
        resultButton.addActionListener(handler);
        dotButton.addActionListener(handler);
        
        
    }   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel = new javax.swing.JPanel();
        displayLabel = new javax.swing.JLabel();
        acButton = new javax.swing.JButton();
        invertButton = new javax.swing.JButton();
        percentButton = new javax.swing.JButton();
        divisionButton = new javax.swing.JButton();
        sevenButton = new javax.swing.JButton();
        eightButton = new javax.swing.JButton();
        nineButton = new javax.swing.JButton();
        multiplicationButton = new javax.swing.JButton();
        fourButton = new javax.swing.JButton();
        fiveButton = new javax.swing.JButton();
        sixButton = new javax.swing.JButton();
        subtractButton = new javax.swing.JButton();
        oneButton = new javax.swing.JButton();
        twoButton = new javax.swing.JButton();
        threeButton = new javax.swing.JButton();
        addictionButton = new javax.swing.JButton();
        zeroButton = new javax.swing.JButton();
        dotButton = new javax.swing.JButton();
        resultButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Calculadora");

        displayLabel.setFont(new java.awt.Font("DejaVu Sans", 1, 24)); // NOI18N

        acButton.setText("AC");

        invertButton.setText("+/-");

        percentButton.setText("%");

        divisionButton.setText("/");

        sevenButton.setText("7");

        eightButton.setText("8");

        nineButton.setText("9");

        multiplicationButton.setText("X");

        fourButton.setText("4");

        fiveButton.setText("5");

        sixButton.setText("6");

        subtractButton.setText("-");

        oneButton.setText("1");

        twoButton.setText("2");

        threeButton.setText("3");

        addictionButton.setText("+");

        zeroButton.setText("0");

        dotButton.setText(".");

        resultButton.setText("=");

        javax.swing.GroupLayout jPanelLayout = new javax.swing.GroupLayout(jPanel);
        jPanel.setLayout(jPanelLayout);
        jPanelLayout.setHorizontalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(acButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(invertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(percentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(divisionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(sevenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(multiplicationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addComponent(fourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subtractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelLayout.createSequentialGroup()
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(zeroButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanelLayout.createSequentialGroup()
                                .addComponent(oneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(twoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanelLayout.createSequentialGroup()
                                .addComponent(threeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addictionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelLayout.createSequentialGroup()
                                .addComponent(dotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanelLayout.setVerticalGroup(
            jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelLayout.createSequentialGroup()
                .addComponent(displayLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(acButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(invertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(percentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(divisionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sevenButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(eightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(multiplicationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fourButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fiveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sixButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subtractButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(oneButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(twoButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(threeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addictionButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zeroButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultButton, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Calculadora.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Calculadora().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acButton;
    private javax.swing.JButton addictionButton;
    private javax.swing.JLabel displayLabel;
    private javax.swing.JButton divisionButton;
    private javax.swing.JButton dotButton;
    private javax.swing.JButton eightButton;
    private javax.swing.JButton fiveButton;
    private javax.swing.JButton fourButton;
    private javax.swing.JButton invertButton;
    private javax.swing.JPanel jPanel;
    private javax.swing.JButton multiplicationButton;
    private javax.swing.JButton nineButton;
    private javax.swing.JButton oneButton;
    private javax.swing.JButton percentButton;
    private javax.swing.JButton resultButton;
    private javax.swing.JButton sevenButton;
    private javax.swing.JButton sixButton;
    private javax.swing.JButton subtractButton;
    private javax.swing.JButton threeButton;
    private javax.swing.JButton twoButton;
    private javax.swing.JButton zeroButton;
    // End of variables declaration//GEN-END:variables

    
    
    private class ButtonHandler implements ActionListener, KeyListener{
       
        String cadeia = "0";
        double Num1;
        double Num2;
        double resultado;
        char Operacao;
        int Achou, zerar;
        boolean flag = false;
        
        @Override
        public void actionPerformed(ActionEvent event){                        
            if (event.getSource() == oneButton)
            {
                this.numberOne();
            }
            
            if (event.getSource() == twoButton)
            {
                this.numberTwo();
            }
            
            if (event.getSource() == threeButton) 
            {
                this.numberThree();
            }
            
            if (event.getSource() == fourButton)
            {
                this.numberFour();
            }
            
            if (event.getSource() == fiveButton)
            {
                this.numberFive();
            }
            
            if (event.getSource() == sixButton)
            {
                this.numberSix();
            }
            
            if (event.getSource() == sevenButton)
            {
                this.numberSeven();
            }
            
            if (event.getSource() == eightButton)
            {
                this.numberEight();
            }
            
            if (event.getSource() == nineButton)
            {
                this.numberNine();
            }
            
            if (event.getSource() == zeroButton)
            {
                this.numberZero();
            }
            
            if (event.getSource() == acButton)
            {
                this.acFunc();
            }
            
            if (event.getSource() == invertButton)
            {
                this.invertFunc();
            }
            
            if (event.getSource() == percentButton)
            {
                this.percentFunc();
            }
            
            if (event.getSource() == divisionButton)
            {
                this.divisionFunc();
            }
            
            if (event.getSource() == multiplicationButton)
            {
                this.multiplicationFunc();
            }
            
            if (event.getSource() == subtractButton)
            {
                this.subtractFunc();
            }
            
            if (event.getSource() == addictionButton)
            {
                this.addictionFunc();
            }
            
            if (event.getSource() == dotButton)
            {
                this.dotFunc();
            }
            
            if (event.getSource() == resultButton)
            {
                this.resultFunc();
            }
            
            displayLabel.setText("" + cadeia);
        }

        @Override
        public void keyPressed(KeyEvent e) {
            if(e.getKeyCode() == VK_NUMPAD1 || e.getKeyCode() == VK_1)
            {
                this.numberOne();
            }
            
            if(e.getKeyCode() == VK_NUMPAD2 || e.getKeyCode() == VK_2)
            {
                this.numberTwo();
            }
            
            if(e.getKeyCode() == VK_NUMPAD3 || e.getKeyCode() == VK_3)
            {
                this.numberThree();
            }
            
            if(e.getKeyCode() == VK_NUMPAD4 || e.getKeyCode() == VK_4)
            {
                this.numberFour();
            }
            
            if(e.getKeyCode() == VK_NUMPAD5 || e.getKeyCode() == VK_5)
            {
                this.numberFive();
            }
            
            if(e.getKeyCode() == VK_NUMPAD6 || e.getKeyCode() == VK_6)
            {
                this.numberSix();
            }
            
            if(e.getKeyCode() == VK_NUMPAD7 || e.getKeyCode() == VK_7)
            {
                this.numberSeven();
            }
            
            if(e.getKeyCode() == VK_NUMPAD8 || e.getKeyCode() == VK_8){
                this.numberEight();
            }
            
            if(e.getKeyCode() == VK_NUMPAD9 || e.getKeyCode() == VK_9)
            {
                this.numberNine();
            }
            
            if(e.getKeyCode() == VK_NUMPAD0 || e.getKeyCode() == 0)
            {
                this.numberZero();
            }
            
            if(e.getKeyCode() == VK_BACK_SPACE)
            {
                this.eraseLastFunc();
            }
            
            if(e.getKeyCode() == VK_DIVIDE)
            {
                this.divisionFunc();
            }
            
            if(e.getKeyCode() == VK_MULTIPLY)
            {
                this.multiplicationFunc();
            }
            
            if(e.getKeyCode() == VK_SUBTRACT)
            {
                this.subtractFunc();
            }
            
            if(e.getKeyCode() == VK_ADD)
            {
                this.addictionFunc();
            }
            
            if(e.getKeyCode() == VK_DECIMAL || e.getKeyCode() == VK_COMMA || e.getKeyCode() == VK_SEPARATOR)
            {
                this.dotFunc();
            }
            
            if(e.getKeyCode() == VK_ENTER)
            {
                this.resultFunc();
            }
            
             displayLabel.setText("" + cadeia);
        }    
         
         
        @Override
        public void keyTyped(KeyEvent e) {
        }
        
      

        @Override
        public void keyReleased(KeyEvent e) {
        }

        
        private void setCondition()
        {
            if (zerar == 1)
                cadeia = "";
            if (cadeia.equals("0"))
                cadeia = "";       
        }
        
        private void numberOne() {            
            this.setCondition();
            cadeia = cadeia + "1";
            zerar = 0;
            
        }

        private void numberTwo() {
            this.setCondition();
            cadeia = cadeia + "2";
            zerar = 0;
            
        }
        
        private void numberThree() 
        {
            this.setCondition();
            cadeia = cadeia + "3";
            zerar = 0;
            
        }
        
        private void numberFour()
        {
            this.setCondition();
            cadeia = cadeia + "4";
            zerar = 0;
            
        }
        
        private void numberFive()
        {
            this.setCondition();
            cadeia = cadeia + "5";
            zerar = 0;
            
        }
        
        private void numberSix()
        {
            this.setCondition();
            cadeia = cadeia + "6";
            zerar = 0;
            
        }
        
        private void numberSeven()
        {
            this.setCondition();
            cadeia = cadeia + "7";
            zerar = 0;
            
        }
        
        private void numberEight()
        {
            this.setCondition();
            cadeia = cadeia + "8";
            zerar = 0;
            
        }
        
        private void numberNine()
        {
            this.setCondition();
            cadeia = cadeia + "9";
            zerar = 0;
            
        }
        
        private void numberZero()
        {
            if (zerar == 1)
                cadeia = "";
            
            if(!cadeia.equals("0")){
                cadeia = cadeia + "0";
            } else {
                zerar = 1;
            }
            
            zerar = 0;
            
            
        }
        
        private void acFunc()
        {
            cadeia = "0";
            zerar = 1;    
        }
        
        private void eraseLastFunc()
        {
            if (cadeia.length() > 1)
                cadeia = cadeia.substring(0, cadeia.length()-1);
            else {
                cadeia = "0";
                zerar = 1;
            }
            
            
        }
        
        private void invertFunc()
        {
            cadeia = String.valueOf(-1*Double.parseDouble(cadeia));
            zerar = 1;
            
            
        }
        
        private void percentFunc()
        {
            Num1 = Double.parseDouble(displayLabel.getText());
            Operacao = '%';
            zerar = 1;
            
            
        }
        
        private void divisionFunc()
        {
            Num1 = Double.parseDouble(displayLabel.getText());
            Operacao = '/';
            zerar = 1;
            
            
        }
        
        private void multiplicationFunc()
        {
            Num1 = Double.parseDouble(displayLabel.getText());
            Operacao = 'X';
            zerar = 1;
            
            
        }
        
        private void subtractFunc()
        {
            Num1 = Double.parseDouble(displayLabel.getText());
            Operacao = '-';
            zerar = 1;
            
            
        }
        
        private void addictionFunc()
        {
            Num1 = Double.parseDouble(displayLabel.getText());
            Operacao = '+';
            zerar = 1;
            
            
        }
        
        private void dotFunc()
        {
                Achou = 0;
                if (zerar ==1) cadeia = "";
               
                for (int i=0; i<cadeia.length(); ++i)
                    if (cadeia.charAt(i) == '.') Achou=1;
               
                if (cadeia.equals("")) cadeia = cadeia + "0.";
                    else
                        if (Achou == 0) cadeia = cadeia + "."; 
               
                zerar = 0;
            
            
        }
        
        private void resultFunc(
)        {
            Num2 = Double.parseDouble(displayLabel.getText());
            
            switch(Operacao) {
                case 'n':
                    resultado = Num2;
                    break;
                     
                case '+':
                    resultado = Num1 + Num2;
                    break;
                
                case '-':
                    resultado = Num1 - Num2;
                    break;
            
                case 'X':
                    resultado = Num1 * Num2;
                    break;
                    
                case '/':
                    resultado = Num1/Num2;
                    break;
                    
                case '%':
                    resultado = (Num1/100)*Num2; 
                    break;
            }

            cadeia = String.valueOf(resultado);
            flag = true;
            zerar = 1;
        }

        
        

    }
}
